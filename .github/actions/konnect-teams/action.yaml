name: "Konnect Teams"
description: "Provision or destroy Konnect teams"
inputs:
  config:
    description: "Path to the provisioning config file"
    required: true
  action:
    description: "Action to perform"
    required: true
    default: "provision"
  aws_account_id:
    description: "AWS account ID"
    required: true
  aws_region:
    description: "AWS region"
    required: true
    default: "eu-central-1"
  s3_access_key:
    description: "S3 access key"
    required: true
  s3_secret_key:
    description: "S3 secret key"
    required: true
  github_org:
    description: "GitHub organization"
    required: true
  github_token:
    description: "GitHub token"
    required: true
  konnect_token:
    description: "Konnect personal access token"
    required: true
  konnect_server_url:
    description: "Konnect server URL"
    required: true
    default: "https://eu.api.konghq.com"

runs:
  using: "composite"
  steps:

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: "latest"

    - name: Validate config
      run: |
        config_content=${{ inputs.config }}

        # Validate metadata.type
        metadata_type=$(echo "$config_content" | jq -r '.metadata.type')
        if [ "$metadata_type" != "konnect.teams" ]; then
          echo "Invalid metadata.type: $metadata_type. Expected 'konnect.teams'"
          exit 1
        fi

        # Validate resources is an array
        resources_type=$(echo "$config_content" | jq -r '.resources | type')
        if [ "$resources_type" != "array" ]; then
          echo "Invalid resources type: $resources_type. Expected 'array'"
          exit 1
        fi

        # Validate each resource type
        invalid_resources=$(echo "$config_content" | jq '[.resources[] | select(.type != "konnect.team")]')
        if [ "$(echo "$invalid_resources" | jq 'length')" -ne 0 ]; then
          echo "Invalid resource types found: $(echo "$invalid_resources" | jq -c '.[]')"
          exit 1
        fi

        echo "Config validation passed"
      shell: bash

    - name: Set variables
      run: |
        config_content=${{ inputs.config }}
        RESOURCE_TYPE=$(echo "$config_content" | jq -r '.metadata.type')
        TERRAFORM_DIR=${{ github.action_path }}/terraform
        
        echo "RESOURCE_TYPE=$RESOURCE_TYPE" >> $GITHUB_ENV
        echo "TERRAFORM_DIR=$TERRAFORM_DIR" >> $GITHUB_ENV

        echo "TF_VAR_config=$(echo "$config_content" | jq -c .)" >> $GITHUB_ENV
        
        echo "TF_VAR_github_token=${{ inputs.github_token }}" >> $GITHUB_ENV
        echo "TF_VAR_github_org=${{ inputs.github_org }}" >> $GITHUB_ENV

        echo "TF_VAR_konnect_personal_access_token=${{ inputs.konnect_token }}" >> $GITHUB_ENV
        echo "TF_VAR_konnect_server_url=${{ inputs.konnect_server_url }}" >> $GITHUB_ENV

      shell: bash

    - name: Terraform Init
      shell: bash
      run: |
        terraform init -upgrade \
          -backend-config=config.aws.s3.tfbackend \
          -backend-config="bucket=$RESOURCE_TYPE" \
          -backend-config="key=tfstate" \
          -backend-config="region=${{ inputs.aws_region }}" \
          -backend-config="access_key=${{ inputs.s3_access_key }}" \
          -backend-config="secret_key=${{ inputs.s3_secret_key }}"
      working-directory: ${{env.TERRAFORM_DIR}}

    - name: Terraform Plan
      shell: bash
      if: ${{ inputs.action == 'provision' }}
      run: |
        terraform plan -out=tfplan
      working-directory: ${{env.TERRAFORM_DIR}}

    - name: Terraform Apply
      shell: bash
      if: ${{ inputs.action == 'provision' }}
      id: tfapply
      run: |
        terraform apply -auto-approve tfplan
      working-directory: ${{env.TERRAFORM_DIR}}

    - name: Terraform destroy
      shell: bash
      if: ${{ inputs.action == 'destroy' }}
      run: |
        terraform destroy -auto-approve
      working-directory: ${{env.TERRAFORM_DIR}}
