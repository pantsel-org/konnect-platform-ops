name: Onboard Konnect Teams

on:
  workflow_dispatch:
    inputs:
      config:
        description: 'Path to the provisioning config file'
        type: string
        default: platform/teams.json
      action:
        description: 'Action to perform'
        required: true
        type: choice
        default: 'provision'
        options:
          - 'provision'
          - 'destroy'
      konnect_region:
        description: 'Konnect region'
        type: choice
        default: 'eu'
        options:
          - 'us'
          - 'eu'
          - 'me'
          - 'au'
          - 'in'
      aws_region:
        description: "AWS region"
        required: true
        default: "eu-central-1"
      environment:
        description: 'Environment to provision'
        type: choice
        default: 'dev'
        options:
          - 'dev'
          - 'tst'
          - 'acc'
          - 'prd'

env:
  KONNECT_TEAM_RESOURCES_S3_BUCKET_PREFIX: "konnect.team"
  TERRAFORM_DIR: ${{ github.workspace }}/terraform/konnect/teams
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_REGION: ${{ inputs.aws_region }}

jobs:
  generate-offboarding-matrix:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
      is_empty: ${{ steps.set-matrix.outputs.is_empty }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Read Config JSON file
        id: set-matrix
        run: |
          MATRIX=$( cat ${{ github.workspace }}/${{ inputs.config }} | jq -c '[.resources[] | select(.offboarded == true)]' )

          if [[ "$MATRIX" == "[]" ]]; then
            echo "::set-output name=is_empty::true"
            echo "::set-output name=matrix::[]"
            exit 0
          fi

          echo "::set-output name=is_empty::false"
          echo "::set-output name=matrix::$MATRIX"
        shell: bash

  offboard-konnect-teams:
    needs: generate-offboarding-matrix
    if: needs.generate-offboarding-matrix.outputs.is_empty == 'false'
    runs-on: ubuntu-latest
    strategy:
      matrix: 
        include: ${{ fromJSON(needs.generate-offboarding-matrix.outputs.matrix) }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install MinIO Client
        shell: bash
        run: |
          wget https://dl.min.io/client/mc/release/linux-amd64/mc -O /usr/local/bin/mc
          chmod +x /usr/local/bin/mc
          echo "MinIO Client installed successfully"

      - name: Install vault cli
        uses: eLco/setup-vault@v1

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 'latest'

      - name: Set resource variables from config file
        run: |
          TEAM_NAME_NORMALIZED=$(echo "${{ matrix.name }}" | tr '[:upper:]' '[:lower:]' | tr ' ' '-')
          echo "TEAM_NAME_NORMALIZED=$TEAM_NAME_NORMALIZED" >> $GITHUB_ENV

      - name: Check if S3 bucket exists
        id: check-bucket
        shell: bash
        run: |
          if mc ls "s3/$KONNECT_TEAM_RESOURCES_S3_BUCKET_PREFIX.$TEAM_NAME_NORMALIZED" > /dev/null 2>&1; then
            echo "::set-output name=exists::true"
          else
            echo "::set-output name=exists::false"
          fi

      - name: Terraform Init
        if: steps.check-bucket.outputs.exists == 'true'
        shell: bash
        run: |
          terraform init -upgrade \
          -backend-config=config.aws.s3.tfbackend \
          -backend-config="bucket=$KONNECT_TEAM_RESOURCES_S3_BUCKET_PREFIX.$TEAM_NAME_NORMALIZED" \
          -backend-config="key=tfstate" \
          -backend-config="region=${{ inputs.aws_region }}" \
          -backend-config="access_key=${{ secrets.AWS_ACCESS_KEY_ID }}" \
          -backend-config="secret_key=${{ secrets.AWS_SECRET_ACCESS_KEY }}"
        working-directory: ${{ env.TERRAFORM_DIR }}

      - name: Terraform destroy
        if: steps.check-bucket.outputs.exists == 'true'
        shell: bash
        run: |
          terraform destroy -auto-approve
        working-directory: ${{ env.TERRAFORM_DIR }}

  provision-konnect-teams:
    runs-on: ubuntu-latest
    needs: offboard-konnect-teams
    if: always()
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "latest"

      - name: Validate config
        run: |
          config_content=$( cat ${{ github.workspace }}/${{ inputs.config }} | jq -r . )

          # Validate metadata.type
          metadata_type=$(echo "$config_content" | jq -r '.metadata.type')
          if [ "$metadata_type" != "konnect.teams" ]; then
            echo "Invalid metadata.type: $metadata_type. Expected 'konnect.teams'"
            exit 1
          fi

          # Validate resources is an array
          resources_type=$(echo "$config_content" | jq -r '.resources | type')
          if [ "$resources_type" != "array" ]; then
            echo "Invalid resources type: $resources_type. Expected 'array'"
            exit 1
          fi

          # Validate each resource type
          invalid_resources=$(echo "$config_content" | jq '[.resources[] | select(.type != "konnect.team")]')
          if [ "$(echo "$invalid_resources" | jq 'length')" -ne 0 ]; then
            echo "Invalid resource types found: $(echo "$invalid_resources" | jq -c '.[]')"
            exit 1
          fi

          echo "Config validation passed"
        shell: bash

      - name: Set variables
        run: |
          config_content=$( cat ${{ github.workspace }}/${{ inputs.config }} | jq -r . )
          RESOURCE_TYPE=$(echo "$config_content" | jq -r '.metadata.type')
          
          echo "RESOURCE_TYPE=$RESOURCE_TYPE" >> $GITHUB_ENV

          echo "TF_VAR_config=$(echo "$config_content" | jq -c .)" >> $GITHUB_ENV
          
          echo "TF_VAR_github_token=${{ secrets.GH_PAT || secrets.GITHUB_TOKEN }}" >> $GITHUB_ENV
          echo "TF_VAR_github_org=${{ github.repository_owner }}" >> $GITHUB_ENV

          echo "TF_VAR_konnect_personal_access_token=${{ secrets.KONNECT_PAT }}" >> $GITHUB_ENV
          echo "TF_VAR_konnect_server_url=https://${{ inputs.konnect_region }}.api.konghq.com" >> $GITHUB_ENV

        shell: bash

      - name: Terraform Init
        shell: bash
        run: |
          terraform init -upgrade \
            -backend-config=config.aws.s3.tfbackend \
            -backend-config="bucket=$RESOURCE_TYPE" \
            -backend-config="key=tfstate" \
            -backend-config="region=$AWS_REGION" \
            -backend-config="access_key=$AWS_ACCESS_KEY_ID" \
            -backend-config="secret_key=$AWS_SECRET_ACCESS_KEY"
        working-directory: ${{ env.TERRAFORM_DIR }}

      - name: Terraform Plan
        shell: bash
        if: ${{ inputs.action == 'provision' }}
        run: |
          terraform plan -out=tfplan
        working-directory: ${{ env.TERRAFORM_DIR }}

      - name: Terraform Apply
        shell: bash
        if: ${{ inputs.action == 'provision' }}
        id: tfapply
        run: |
          terraform apply -auto-approve tfplan
        working-directory: ${{ env.TERRAFORM_DIR }}

      - name: Terraform destroy
        shell: bash
        if: ${{ inputs.action == 'destroy' }}
        run: |
          terraform destroy -auto-approve
        working-directory: ${{ env.TERRAFORM_DIR }}