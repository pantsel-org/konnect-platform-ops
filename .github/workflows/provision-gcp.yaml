name: Provision GCP resources

on:
  workflow_dispatch:
    inputs:
      action:
        description: 'Action to perform'
        required: true
        type: choice
        default: 'provision'
        options:
          - 'provision'
          - 'destroy'
      aws_region:
        description: "AWS region"
        required: true
        default: "eu-central-1"
      gcp_region:
        description: "GCP region"
        required: true
        default: "europe-west4"
      environment:
        description: 'Environment to provision'
        type: choice
        default: 'dev'
        options:
          - 'dev'
          - 'tst'
          - 'acc'
          - 'prd'

env:
  AWS_S3_BUCKET: "gcp.resources"
  GCP_VAULT_STORAGE_BUCKET: "kpo-vault-storage"
  GCP_PROJECT: "konnect-platform-ops"
  TERRAFORM_DIR: ${{ github.workspace }}/terraform/gcp
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_REGION: ${{ inputs.aws_region }}
  TF_VAR_vault_root_token: ${{ secrets.VAULT_TOKEN }}

jobs:
  provision-gcp-resources:
    runs-on: ubuntu-latest
    permissions:
      contents: 'read'
      id-token: 'write'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - id: 'auth'
        if: env.ACT != 'true'  # Only runs if NOT running locally
        uses: 'google-github-actions/auth@v2'
        with:
          workload_identity_provider: 'projects/625240086537/locations/global/workloadIdentityPools/github-pool/providers/github-provider'
          service_account: 'github-actions@konnect-platform-ops.iam.gserviceaccount.com'

      - uses: eLco/setup-vault@v1
        with:
          vault_version: 1.8.7

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "latest"

      - name: 'Set up GCloud SDK'
        uses: 'google-github-actions/setup-gcloud@v2'
        with:
          version: '>= 363.0.0'

      # ToDo: Use Workload Identity Federation instead
      - name: Authenticate with Google Cloud
        if: env.ACT == 'true'  # Only runs if NOT running locally
        run: |
          echo "$GCP_CREDENTIALS" > gcp-key.json
          echo "TF_VAR_gcp_credentials=$PWD/gcp-key.json" >> $GITHUB_ENV
        shell: bash
        env:
          GCP_CREDENTIALS: ${{ secrets.GCP_CREDENTIALS }}
        working-directory: ${{ env.TERRAFORM_DIR }}

      - name: Init setup
        shell: bash
        run: |

          gcloud auth activate-service-account terraform-sa@konnect-platform-ops.iam.gserviceaccount.com

          gcloud config set project ${{ env.GCP_PROJECT }}

          gcloud services enable run.googleapis.com \
            cloudbuild.googleapis.com \
            cloudresourcemanager.googleapis.com \
            secretmanager.googleapis.com \
            sqladmin.googleapis.com \
            iam.googleapis.com --project ${{ env.GCP_PROJECT }}

          if ! gsutil ls -b gs://${{ env.GCP_VAULT_STORAGE_BUCKET }}; then
            gsutil mb -l ${{ inputs.gcp_region }} gs://${{ env.GCP_VAULT_STORAGE_BUCKET }}/
          fi

        working-directory: ${{ env.TERRAFORM_DIR }}

      - name: Terraform Init
        shell: bash
        run: |
          terraform init -upgrade \
            -backend-config=config.aws.s3.tfbackend \
            -backend-config="bucket=$AWS_S3_BUCKET" \
            -backend-config="key=tfstate" \
            -backend-config="region=$AWS_REGION" \
            -backend-config="access_key=$AWS_ACCESS_KEY_ID" \
            -backend-config="secret_key=$AWS_SECRET_ACCESS_KEY"

          # Get vault_url from the terraform output
          echo "VAULT_URL=$(terraform output vault_url)" >> $GITHUB_ENV
        working-directory: ${{ env.TERRAFORM_DIR }}

      - name: Terraform Plan
        shell: bash
        if: ${{ inputs.action == 'provision' }}
        run: |
          terraform plan -out=tfplan
        working-directory: ${{ env.TERRAFORM_DIR }}

      - name: Terraform Apply
        shell: bash
        if: ${{ inputs.action == 'provision' }}
        id: tfapply
        run: |
          terraform apply -auto-approve tfplan
        working-directory: ${{ env.TERRAFORM_DIR }}

      - name: Configure Vault
        shell: bash
        if: ${{ inputs.action == 'provision' }}
        run: |
          ./configure-vault.sh ${{ env.VAULT_URL }} ${{ secrets.VAULT_TOKEN }} ${{ github.repository_owner }}
        working-directory: ${{ github.workspace }}/scripts

      - name: Terraform destroy
        shell: bash
        if: ${{ inputs.action == 'destroy' }}
        run: |
          terraform destroy -auto-approve
        working-directory: ${{ env.TERRAFORM_DIR }}